	Django Admin
	-------------

Admin sites are integral part of any website. 

Django provides an admin app.

We will create our own admin site called cadmin.

We are communicating the django admin site first we need to create a superuser

	we can create a superuser,by following command

	python manage.py createsuperuser


In django admin site,The Groups and Users under "Authentication and Autherization" are coming from django.contrib.auth.

Django uses
	Groups model to handle the permissions.
	The Users model refers to the users of the site.

Adding our models into Django admin site:
-----------------------------------------
By default ,django admin app does not load any model from the apps we are created.

To add a model to the django admin site we have to modify admin.py file available inside every app.

Note:
------
If admin.py file is not available inside the our application,just we can create a new file and called it as admin.py and then add our model into admin.py file.


ex:
---
step1:
----
to create a project

	django-admin startproject proj29

step2:
-----
goto project location and to create an application in the project location.

	cd proj29

	python manage.py startapp app29

step3:
-----
to install our application in the settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
    
    'app29'
]

step4:
----
to configure database related settings in the settings.py file of the project.

	settings.py
	-----------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

step5:
----
to create a models in the models.py file of the application.

	models.py
	--------
from django.db import models

# Create your models here.
class Employe(models.Model):
    eid=models.IntegerField(primary_key=True)
    ename=models.CharField(max_length=20)
    sal=models.DecimalField(max_digits=6,decimal_places=2)
    active=models.BooleanField(default=False)
    dob=models.DateField()
    dno=models.IntegerField()
    def __str__(self):
        return self.ename

step6:
----
to check the errors in our model

	python manage.py check

step7:
----
to generate the sql query for our model(create a models)

	python manage.py makemigrations

step8:
------
to execute the sql queries

	python manage.py migrate

step9:
----
to create a superuser for communicate the django admin pannel

	python manage.py createsuperuser

username:

email:

password:

re-enter password:

create superuser successfully

step10:
------
to start the server

	python manage.py runserver

step11:
-----
to send the request to the server

	http://127.0.0.1:8000/admin

how to load the our models into django admin pannel?
----------------------------------------------------
	we can add the our models into djnago admin pannel in that case we are apply some changes in the admin.py file of the application.

	admin.py
	-------
from django.contrib import admin
from .models import Employe
# Register your models here.
admin.site.register(Employe)


How to customizing django admin site:
---------------------------------------
	To customize the appearance of models in Django Admin site, we can create a new class "Adminclass" which inherits from "admin.ModelAdmin" in admin.py file.

ModelAdmin Attributes:
-----------------------
1.list_display:
--------------
It contains which model fields to display on the list page.

It accepts a list (or) tuple of fieldnames which you want to display.
	
2.search_fields:
----------------
This attributes enables the search function on the list page.

It accepts a list (or) tuple of fieldnames where you want to search.

It performs a case- insensitive search.
	
3.ordering:
----------
It specifies how the list of objects should be ordered in the django admin site.

It accepts a list (or) tuple of fieldnames to specify the order.

	
4.list_filter:
--------------
This attribute activate the filtering bar.

It accepts a list(or) tuple of field names.

Django provides automatically different shortcuts to filter the 	objects based on the type of the field.


Ex:- Field type		Shortcuts of filter the objects
     -------------------------------------------------	
     DateField		        Today,
				Past 7 days,
				This month,
				This year

    BooleanField		All
				Yes
				No


5.date_hierarchy:
-----------------
This attribute is specially designed to provide an intelligent date based drill-down navigation just above Action select base.

It accepts a string format not a list( or) tuple.


	admin.py
	--------
from django.contrib import admin
from .models import Employe
# Register your models here.
class EmployeAdmin(admin.ModelAdmin):
    list_display=['eid','ename','sal','active','dob','dno']
    search_fields=['active','dno','sal']
    #ordering=['sal'] 
    ordering=['-sal'] #descending
    list_filter=['active']
    date_hierarchy="dob"
    
admin.site.register(Employe,EmployeAdmin)

